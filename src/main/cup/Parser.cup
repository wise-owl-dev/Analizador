package robotcontrol;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;

parser code {:
    // Tabla de símbolos para el análisis semántico
    private SimboloTable SimboloTable = new SimboloTable();
    
    // Lista para almacenar errores sintácticos
    private List<String> syntaxErrors = new ArrayList<>();
    
    // Método para recuperar la tabla de símbolos
    public SimboloTable getSimboloTable() {
        return SimboloTable;
    }
    
    // Método para obtener errores sintácticos
    public List<String> getSyntaxErrors() {
        return syntaxErrors;
    }
    
    // Manejador de errores personalizados
    @Override
    public void syntax_error(Simbolo s) {
        String message = "Error sintáctico en línea " + s.left + ", columna " + s.right + ": " + s.value;
        syntaxErrors.add(message);
        System.err.println(message);
    }
    
    @Override
    public void unrecovered_syntax_error(Simbolo s) throws java.lang.Exception {
        String message = "Error sintáctico fatal en línea " + s.left + ", columna " + s.right + ": " + s.value;
        syntaxErrors.add(message);
        System.err.println(message);
    }
:}

/* Terminales (tokens) */
terminal ROBOT, INICIAR, DETENER;
terminal BASE, CUERPO, GARRA, VELOCIDAD, ABRIR_GARRA, CERRAR_GARRA, REPETIR;
terminal PUNTO, IGUAL, PARENTESIS_ABIERTO, PARENTESIS_CERRADO, LLAVE_ABIERTA, LLAVE_CERRADA, SEMI_COLON;
terminal String IDENTIFICADOR, NUMERO;
terminal ERROR;

/* No terminales */
non terminal INICIO, PROGRAMA, DECLARACION_ROBOT, INSTRUCCION, INSTRUCCIONES, BLOQUE_REPETIR;
non terminal METODO_CON_PARAMETRO, METODO_SIN_PARAMETRO, ASIGNACION;

/* Precedencias */
precedence left IGUAL;
precedence left PUNTO;

/* Gramática */

INICIO ::= PROGRAMA
         ;

PROGRAMA ::= DECLARACION_ROBOT INSTRUCCIONES
           | DECLARACION_ROBOT
           ;

DECLARACION_ROBOT ::= ROBOT IDENTIFICADOR:id SEMI_COLON
                     {:
                        // Agregar el robot a la tabla de símbolos
                        parser.SimboloTable.addSimbolo(new Simbolo(id, "ROBOT", 0, 0, 0));
                     :}
                     ;

INSTRUCCIONES ::= INSTRUCCION INSTRUCCIONES
                | INSTRUCCION
                ;

INSTRUCCION ::= IDENTIFICADOR:id PUNTO METODO_CON_PARAMETRO SEMI_COLON
              {:
                // Verificar que el identificador esté definido
                if (!parser.SimboloTable.containsSimbolo(id)) {
                    parser.syntaxErrors.add("Error semántico: Robot no definido '" + id + "'");
                }
              :}
              | IDENTIFICADOR:id PUNTO METODO_SIN_PARAMETRO SEMI_COLON
              {:
                // Verificar que el identificador esté definido
                if (!parser.SimboloTable.containsSimbolo(id)) {
                    parser.syntaxErrors.add("Error semántico: Robot no definido '" + id + "'");
                }
              :}
              | IDENTIFICADOR:id PUNTO INICIAR PARENTESIS_ABIERTO PARENTESIS_CERRADO SEMI_COLON
              {:
                // Verificar que el identificador esté definido
                if (!parser.SimboloTable.containsSimbolo(id)) {
                    parser.syntaxErrors.add("Error semántico: Robot no definido '" + id + "'");
                }
              :}
              | IDENTIFICADOR:id PUNTO DETENER PARENTESIS_ABIERTO PARENTESIS_CERRADO SEMI_COLON
              {:
                // Verificar que el identificador esté definido
                if (!parser.SimboloTable.containsSimbolo(id)) {
                    parser.syntaxErrors.add("Error semántico: Robot no definido '" + id + "'");
                }
              :}
              | BLOQUE_REPETIR
              ;

METODO_CON_PARAMETRO ::= BASE PARENTESIS_ABIERTO NUMERO:val PARENTESIS_CERRADO
                      {:
                        // Validar rango del ángulo (0-360)
                        int value = Integer.parseInt(val);
                        if (value < 0 || value > 360) {
                            parser.syntaxErrors.add("Error semántico: Ángulo de base fuera de rango (0-360): " + value);
                        }
                      :}
                      | CUERPO PARENTESIS_ABIERTO NUMERO:val PARENTESIS_CERRADO
                      {:
                        // Validar rango del ángulo (0-180)
                        int value = Integer.parseInt(val);
                        if (value < 0 || value > 180) {
                            parser.syntaxErrors.add("Error semántico: Ángulo de cuerpo fuera de rango (0-180): " + value);
                        }
                      :}
                      | GARRA PARENTESIS_ABIERTO NUMERO:val PARENTESIS_CERRADO
                      {:
                        // Validar rango del ángulo (0-90)
                        int value = Integer.parseInt(val);
                        if (value < 0 || value > 90) {
                            parser.syntaxErrors.add("Error semántico: Ángulo de garra fuera de rango (0-90): " + value);
                        }
                      :}
                      | VELOCIDAD PARENTESIS_ABIERTO NUMERO:val PARENTESIS_CERRADO
                      {:
                        // Validar rango de velocidad (1-100)
                        int value = Integer.parseInt(val);
                        if (value < 1 || value > 100) {
                            parser.syntaxErrors.add("Error semántico: Velocidad fuera de rango (1-100): " + value);
                        }
                      :}
                      | REPETIR PARENTESIS_ABIERTO NUMERO:val PARENTESIS_CERRADO
                      {:
                        // Validar que el número de repeticiones sea positivo
                        int value = Integer.parseInt(val);
                        if (value <= 0) {
                            parser.syntaxErrors.add("Error semántico: Número de repeticiones debe ser positivo: " + value);
                        }
                      :}
                      ;

METODO_SIN_PARAMETRO ::= ABRIR_GARRA PARENTESIS_ABIERTO PARENTESIS_CERRADO
                       | CERRAR_GARRA PARENTESIS_ABIERTO PARENTESIS_CERRADO
                       ;

BLOQUE_REPETIR ::= IDENTIFICADOR:id PUNTO REPETIR PARENTESIS_ABIERTO NUMERO:val PARENTESIS_CERRADO LLAVE_ABIERTA INSTRUCCIONES LLAVE_CERRADA
                 {:
                   // Verificar que el identificador esté definido
                   if (!parser.SimboloTable.containsSimbolo(id)) {
                       parser.syntaxErrors.add("Error semántico: Robot no definido '" + id + "'");
                   }
                   
                   // Validar que el número de repeticiones sea positivo
                   int value = Integer.parseInt(val);
                   if (value <= 0) {
                       parser.syntaxErrors.add("Error semántico: Número de repeticiones debe ser positivo: " + value);
                   }
                 :}
                 ;