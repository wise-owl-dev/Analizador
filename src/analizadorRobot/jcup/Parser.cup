import java_cup.runtime.*;
import java.util.ArrayList;

/* Código de parser */
parser code {:
    // Tabla de símbolos para seguimiento de variables y métodos
    private TablaSimbolo tablaSimbolo = new TablaSimbolo();
    
    // Lista para errores
    private ArrayList<String> errores = new ArrayList<>();
    
    // Método para manejar errores sintácticos
    public void syntax_error(Symbol s) {
        String error = "Error sintáctico en línea " + (s.left+1) + ", columna " + (s.right+1) + 
                       ": Símbolo inesperado \"" + s.value + "\"";
        System.out.println(error);
        errores.add(error);
    }

    // Método para manejar errores sintácticos fatales
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        String error = "Error sintáctico fatal en línea " + (s.left+1) + ", columna " + (s.right+1) + 
                       ": Símbolo inesperado \"" + s.value + "\"";
        System.out.println(error);
        errores.add(error);
    }
    
    // Método para obtener la tabla de símbolos
    public TablaSimbolo getTablaSimbolo() {
        return tablaSimbolo;
    }
    
    // Método para obtener la lista de errores
    public ArrayList<String> getErrores() {
        return errores;
    }
    
    // Método para añadir un error
    public void addError(String error) {
        errores.add(error);
        System.out.println(error);
    }
:}

/* Terminales (tokens del analizador léxico) */
terminal ROBOT, INICIAR, DETENER;
terminal BASE, CUERPO, GARRA, VELOCIDAD;
terminal ABRIR_GARRA, CERRAR_GARRA, REPETIR;
terminal PUNTO, IGUAL, PARENTESIS_A, PARENTESIS_C, LLAVE_A, LLAVE_C, COMA, PUNTO_COMA;
terminal String IDENTIFICADOR;
terminal Integer NUMERO;
terminal ERROR;

/* No terminales */
non terminal programa;
non terminal instrucciones, instruccion;
non terminal declaracion_robot;
non terminal accion_robot;
non terminal asignacion_parametro;
non terminal llamada_metodo;
non terminal bloque_repeticion;
non terminal instrucciones_repeticion;

/* Precedencias */
precedence left IGUAL;
precedence left PUNTO;

/* Reglas gramaticales */
start with programa;

programa ::= instrucciones
           ;

instrucciones ::= instrucciones instruccion
                | instruccion
                ;

instruccion ::= declaracion_robot
              | accion_robot
              | error:e 
                {:
                    parser.addError("Error de sintaxis en la instrucción, intentando recuperarse...");
                :}
              ;

declaracion_robot ::= ROBOT IDENTIFICADOR:id
                     {:
                         // Añadir robot a la tabla de símbolos
                         if (parser.tablaSimbolo.symbolExists(id)) {
                             parser.addError("Error semántico: Robot '" + id + "' ya declarado anteriormente");
                         } else {
                             parser.tablaSimbolo.addSymbol(id, "ROBOT", idleft, idright);
                         }
                     :}
                     ;

accion_robot ::= IDENTIFICADOR:id PUNTO llamada_metodo
               {:
                   // Verificar si el robot existe
                   if (!parser.tablaSimbolo.symbolExists(id)) {
                       parser.addError("Error semántico: Robot '" + id + "' no declarado");
                   }
               :}
               | IDENTIFICADOR:id PUNTO asignacion_parametro
               {:
                   // Verificar si el robot existe
                   if (!parser.tablaSimbolo.symbolExists(id)) {
                       parser.addError("Error semántico: Robot '" + id + "' no declarado");
                   }
               :}
               | IDENTIFICADOR:id PUNTO bloque_repeticion
               {:
                   // Verificar si el robot existe
                   if (!parser.tablaSimbolo.symbolExists(id)) {
                       parser.addError("Error semántico: Robot '" + id + "' no declarado");
                   }
               :}
               ;

asignacion_parametro ::= BASE IGUAL NUMERO:val
                       {:
                           // Validar rango para base (0-360)
                           if (val < 0 || val > 360) {
                               parser.addError("Error semántico: Valor fuera de rango para 'base': " + val + " (rango permitido: [0..360])");
                           }
                       :}
                       | CUERPO IGUAL NUMERO:val
                       {:
                           // Validar rango para cuerpo (0-180)
                           if (val < 0 || val > 180) {
                               parser.addError("Error semántico: Valor fuera de rango para 'cuerpo': " + val + " (rango permitido: [0..180])");
                           }
                       :}
                       | GARRA IGUAL NUMERO:val
                       {:
                           // Validar rango para garra (0-90)
                           if (val < 0 || val > 90) {
                               parser.addError("Error semántico: Valor fuera de rango para 'garra': " + val + " (rango permitido: [0..90])");
                           }
                       :}
                       | VELOCIDAD IGUAL NUMERO:val
                       {:
                           // Validar rango para velocidad (1-100)
                           if (val < 1 || val > 100) {
                               parser.addError("Error semántico: Valor fuera de rango para 'velocidad': " + val + " (rango permitido: [1..100])");
                           }
                       :}
                       ;

llamada_metodo ::= BASE PARENTESIS_A NUMERO:val PARENTESIS_C
                 {:
                     // Validar rango para base (0-360)
                     if (val < 0 || val > 360) {
                         parser.addError("Error semántico: Valor fuera de rango para 'base': " + val + " (rango permitido: [0..360])");
                     }
                 :}
                 | CUERPO PARENTESIS_A NUMERO:val PARENTESIS_C
                 {:
                     // Validar rango para cuerpo (0-180)
                     if (val < 0 || val > 180) {
                         parser.addError("Error semántico: Valor fuera de rango para 'cuerpo': " + val + " (rango permitido: [0..180])");
                     }
                 :}
                 | GARRA PARENTESIS_A NUMERO:val PARENTESIS_C
                 {:
                     // Validar rango para garra (0-90)
                     if (val < 0 || val > 90) {
                         parser.addError("Error semántico: Valor fuera de rango para 'garra': " + val + " (rango permitido: [0..90])");
                     }
                 :}
                 | VELOCIDAD PARENTESIS_A NUMERO:val PARENTESIS_C
                 {:
                     // Validar rango para velocidad (1-100)
                     if (val < 1 || val > 100) {
                         parser.addError("Error semántico: Valor fuera de rango para 'velocidad': " + val + " (rango permitido: [1..100])");
                     }
                 :}
                 | ABRIR_GARRA PARENTESIS_A PARENTESIS_C
                 | CERRAR_GARRA PARENTESIS_A PARENTESIS_C
                 | INICIAR
                 | DETENER
                 ;

bloque_repeticion ::= REPETIR PARENTESIS_A NUMERO:num PARENTESIS_C LLAVE_A instrucciones_repeticion LLAVE_C
                    {:
                        // Validar que el número de repeticiones sea positivo
                        if (num <= 0) {
                            parser.addError("Error semántico: El número de repeticiones debe ser positivo, se encontró: " + num);
                        }
                    :}
                    ;

instrucciones_repeticion ::= instrucciones
                           | /* vacío */
                           ;